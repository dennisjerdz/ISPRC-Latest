@model ISPRC.Models.Race
@{
    ViewBag.Title = "Edit";
}
@{
// Layout = "";
}
<div class="row">
    <div class="col-md-12">
        <h3 class="marginTop40"><a href="@Url.Action("Index")">Races</a>&emsp;>&emsp;Edit Race</h3>
        <hr />
    </div>
</div>

<div class="row">
    <div class="col-md-5">
        <h5>Choose Location</h5>
        <div id="map" style="height:400px; width:100%;"></div>
    </div>
    <div class="col-md-7">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model=>model.RaceId)
            @Html.HiddenFor(model => model.DateCreated)
            @Html.HiddenFor(model => model.ForceRaceDone)
            @Html.HiddenFor(model => model.RaceEndedDate)

            <br />
            <div class="form-horizontal">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.RaceName, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.RaceName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.RaceName, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-md-6">
                        <label class="control-label">Release Point</label>
                        @*
            @Html.DropDownList("ReleasePointId", null, htmlAttributes: new { @class = "form-control releasePoint" })
                        *@
                        <select class="form-control releasePoint" id="RelaesePointId" name="ReleasePointId">
                            <option>Not set</option>
                            @if (ViewBag.ReleasePoints != null)
                            {
                                foreach (var item in ViewBag.ReleasePoints)
                                {
                                    if (item.ReleasePointId == Model.ReleasePointId)
                                    {
                                        <option selected data-coordinate="@item.ReleasePointCoordinates" value="@item.ReleasePointId">@item.ReleasePointName</option>
                                    }
                                    else
                                    {
                                        <option data-coordinate="@item.ReleasePointCoordinates" value="@item.ReleasePointId">@item.ReleasePointName</option>
                                    }
                                }
                            }
                        </select>
                        @Html.ValidationMessageFor(model => model.ReleasePointId, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.RaceStartDate, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.RaceStartDate, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.RaceStartDate, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-md-6">
                        @Html.LabelFor(model => model.RaceCutOffDate, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.RaceCutOffDate, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.RaceCutOffDate, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.RaceDescription, htmlAttributes: new { @class = "control-label" })
                        @Html.TextAreaFor(model => model.RaceDescription, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.RaceDescription, "", new { @class = "text-danger" })
                    </div>
                </div>

                @*
                <div class="form-group">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.RaceLatitudeCoordinate, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.RaceLatitudeCoordinate, new { htmlAttributes = new { @class = "form-control latitude" } })
                        @Html.ValidationMessageFor(model => model.RaceLatitudeCoordinate, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.RaceLongitudeCoordinate, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.RaceLongitudeCoordinate, new { htmlAttributes = new { @class = "form-control longitude" } })
                        @Html.ValidationMessageFor(model => model.RaceLongitudeCoordinate, "", new { @class = "text-danger" })
                    </div>
                </div>
                *@

                <!--
                <div class="form-horizontal">
                    @Html.LabelFor(model => model.RaceEndedDate, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.RaceEndedDate, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.RaceEndedDate, "", new { @class = "text-danger" })
                </div>
                -->
                <!--
                <div class="form-horizontal">
                    @Html.LabelFor(model => model.DateCreated, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.DateCreated, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.DateCreated, "", new { @class = "text-danger" })
                </div>
                -->
                <!--
                <div class="form-group">
                    @Html.LabelFor(model => model.ForceRaceDone, htmlAttributes: new { @class = "control-label" })
                    <div class="checkbox">
                        @Html.EditorFor(model => model.ForceRaceDone)
                        @Html.ValidationMessageFor(model => model.ForceRaceDone, "", new { @class = "text-danger" })
                    </div>
                </div>
                -->
                <div class="form-group">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.RaceLoadingDate, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.RaceLoadingDate, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.RaceLoadingDate, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-md-6">
                        <br />
                        <input type="submit" value="Save" class="btn btn-info btn-block" style="margin-top:5px;" />
                    </div>
                </div>
            </div>

            <!--<div id="qrcode"></div>-->
        }
    </div>
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        var map;
        var markers = [];
        var infowindow;
        var marker;
        var editLatLng;
        var coordinatesArray;
        var formattedCoordinates;

        /*
        $(".latitude").keyup(function () {
            addMarker( {lat:$(".latitude").val(),lang:$(".longitude").val()});
        });

        $(".longitude").keyup(function () {
            addMarker({ lat: $(".latitude").val(), lang: $(".longitude").val() });
        });
        */

        $(document).ready(function () {
            $(".releasePoint").change(function () {
                var coordinates = $(this).find(':selected').data('coordinate');

                coordinatesArray = coordinates.split(",");
                console.log(coordinatesArray[0] + " " + coordinatesArray[1])
                formattedCoordinates = { lat: Number(coordinatesArray[0]), lng: Number(coordinatesArray[1]) };

                clearMarkers();
                markers = [];

                addMarker(formattedCoordinates);
            });
        });

        function initMap() {

            map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: 14.599512, lng: 120.984222 },
                zoom: 9
            });

            editLatLng = { lat: @Model.ReleasePoint.RaceLatitudeCoordinate, lng: @Model.ReleasePoint.RaceLongitudeCoordinate };

            addMarker(editLatLng);

            /*
            map.addListener('click', function (event) {
                clearMarkers();
                markers = [];

                $(".latitude").val(event.latLng.lat);
                $(".longitude").val(event.latLng.lng);
                addMarker(event.latLng);

                console.log(event.latLng);
            });

            addMarker(editLatLng);
            */
        }

        $(document).ready(function () {
            $(".releasePoint").change(function () {
                alert($(this).val());
            });
        });

        function addMarker(location) {
            marker = new google.maps.Marker({
                position: location,
                map: map
            });
            markers.push(marker);

            marker['infowindow'] = new google.maps.InfoWindow({
                content: "<div>" + $(".latitude").val() + "," + $(".longitude").val() + "</div>"
            });

            google.maps.event.addListener(marker, 'mouseover', function () {
                this['infowindow'].open(map, this);
            });
        }

        function setMapOnAll(map) {
            for (var i = 0; i < markers.length; i++) {
                markers[i].setMap(map);
            }
        }

        function clearMarkers() {
            setMapOnAll(null);
        }
    </script>
    <script src="~/Content/qrcode.min.js"></script>
    <script type="text/javascript">
        var qrcode = new QRCode("qrcode", {
            text: "http://jindo.dev.naver.com/collie",
            width: 128,
            height: 128,
            colorDark: "#000000",
            colorLight: "#ffffff",
            correctLevel: QRCode.CorrectLevel.H
        });

        // qrcode.clear(); // clear the code.
        // qrcode.makeCode("http://naver.com"); // make another code.
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBk14L0DI_cIAX-EQFLP0uLIUZ00fopkGs&callback=initMap" async defer></script>
}
